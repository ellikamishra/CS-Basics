critical-https://www.tutorialspoint.com/critical-section-problem

class MyCircularQueue {
public:
    struct node{
        int val;
        struct node* next;
    };
    struct node* rear;
    struct node* front;
    int size=0;
    int maxS=0;
    MyCircularQueue(int k) {
        size=k;
        maxS=k;
        
    }
    
    bool enQueue(int value) {
        if(size==0) return false;
        else{
            
            node* temp;
            temp=new node;
            temp->val=value;
            temp->next=NULL;
            size--;
            if(size==maxS){

            front=temp;
            rear=temp;
            
        }
        
        else{
            rear->next=temp;
            rear=temp;
        }
    }
      return true;  
  
    }
    
    bool deQueue() {
        if(size==maxS) return false;
        node* temp=front;
        front=front->next;
        delete(temp);
        
        return true;
    }
    
    int Front() {
        if(size==maxS) return -1;
        
        return front->val;
    }
    
    int Rear() {
        if(size==maxS) return -1;
        
        return rear->val;
    }
    
    bool isEmpty() {
        if(size==maxS) return true;
        
        return false;
    }
    
    bool isFull() {
        if(size==0) return true;
        
        return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */
